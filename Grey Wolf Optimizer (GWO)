import numpy as np

# --- Problem Setup ---

jobs = ['Job1', 'Job2', 'Job3', 'Job4', 'Job5']
processing_times = np.array([2, 4, 6, 8, 3])

num_jobs = len(jobs)

print("Job Scheduling Problem")
print("----------------------")
print("Jobs:", jobs)
print("Processing times:", processing_times)
print()

# --- Fitness function: sum of completion times for a job sequence ---

def fitness(position):
    seq_indices = np.argsort(position)
    completion_times = np.cumsum(processing_times[seq_indices])
    return np.sum(completion_times)

# --- Grey Wolf Optimizer (GWO) Implementation ---

class GreyWolfOptimizer:
    def __init__(self, fitness_func, dim, lb, ub, num_wolves=5, max_iter=5):
        self.fitness_func = fitness_func
        self.dim = dim
        self.lb = np.array(lb)
        self.ub = np.array(ub)
        self.num_wolves = num_wolves
        self.max_iter = max_iter

        self.positions = self.lb + (self.ub - self.lb) * np.random.rand(num_wolves, dim)
        self.alpha_pos = np.zeros(dim)
        self.alpha_score = float("inf")
        self.beta_pos = np.zeros(dim)
        self.beta_score = float("inf")
        self.delta_pos = np.zeros(dim)
        self.delta_score = float("inf")

    def optimize(self):
        for iter in range(1, self.max_iter + 1):
            for i in range(self.num_wolves):
                self.positions[i] = np.clip(self.positions[i], self.lb, self.ub)

                fitness_val = self.fitness_func(self.positions[i])

                if fitness_val < self.alpha_score:
                    self.alpha_score = fitness_val
                    self.alpha_pos = self.positions[i].copy()
                elif fitness_val < self.beta_score:
                    self.beta_score = fitness_val
                    self.beta_pos = self.positions[i].copy()
                elif fitness_val < self.delta_score:
                    self.delta_score = fitness_val
                    self.delta_pos = self.positions[i].copy()

            a = 2 - (2 * iter / self.max_iter)

            for i in range(self.num_wolves):
                for j in range(self.dim):
                    r1, r2 = np.random.rand(), np.random.rand()
                    A1 = 2 * a * r1 - a
                    C1 = 2 * r2
                    D_alpha = abs(C1 * self.alpha_pos[j] - self.positions[i][j])
                    X1 = self.alpha_pos[j] - A1 * D_alpha

                    r1, r2 = np.random.rand(), np.random.rand()
                    A2 = 2 * a * r1 - a
                    C2 = 2 * r2
                    D_beta = abs(C2 * self.beta_pos[j] - self.positions[i][j])
                    X2 = self.beta_pos[j] - A2 * D_beta

                    r1, r2 = np.random.rand(), np.random.rand()
                    A3 = 2 * a * r1 - a
                    C3 = 2 * r2
                    D_delta = abs(C3 * self.delta_pos[j] - self.positions[i][j])
                    X3 = self.delta_pos[j] - A3 * D_delta

                    self.positions[i][j] = (X1 + X2 + X3) / 3

            print(f"Iteration {iter:2d}/{self.max_iter}: Best Total Completion Time = {self.alpha_score:.4f}")

        return self.alpha_pos, self.alpha_score

# --- Run the optimizer ---

if __name__ == "__main__":
    dim = num_jobs
    lb = [0] * dim
    ub = [1] * dim

    gwo = GreyWolfOptimizer(fitness_func=fitness, dim=dim, lb=lb, ub=ub, num_wolves=10, max_iter=6)
    best_pos, best_score = gwo.optimize()

    best_seq_indices = np.argsort(best_pos)
    best_seq = [jobs[i] for i in best_seq_indices]

    print("\nBest job sequence found:")
    print(best_seq)
    print(f"Minimum total completion time: {best_score:.4f}")
